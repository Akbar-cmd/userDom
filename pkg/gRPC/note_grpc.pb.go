// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: note.proto

package gRPC

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Bike_GetBikeByUser_FullMethodName    = "/gRPC.Bike/GetBikeByUser"
	Bike_CreateBikeByUser_FullMethodName = "/gRPC.Bike/CreateBikeByUser"
	Bike_UpdateBikeByUser_FullMethodName = "/gRPC.Bike/UpdateBikeByUser"
	Bike_DeleteBikeByUser_FullMethodName = "/gRPC.Bike/DeleteBikeByUser"
)

// BikeClient is the client API for Bike service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BikeClient interface {
	GetBikeByUser(ctx context.Context, in *GetBikeByUserRequest, opts ...grpc.CallOption) (*GetBikeByUserResponse, error)
	CreateBikeByUser(ctx context.Context, in *CreateBikeByUserRequest, opts ...grpc.CallOption) (*CreateBikeByUserResponse, error)
	UpdateBikeByUser(ctx context.Context, in *UpdateBikeByUserRequest, opts ...grpc.CallOption) (*UpdateBikeByUserResponse, error)
	DeleteBikeByUser(ctx context.Context, in *DeleteBikeByUserRequest, opts ...grpc.CallOption) (*DeleteBikeByUserResponse, error)
}

type bikeClient struct {
	cc grpc.ClientConnInterface
}

func NewBikeClient(cc grpc.ClientConnInterface) BikeClient {
	return &bikeClient{cc}
}

func (c *bikeClient) GetBikeByUser(ctx context.Context, in *GetBikeByUserRequest, opts ...grpc.CallOption) (*GetBikeByUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBikeByUserResponse)
	err := c.cc.Invoke(ctx, Bike_GetBikeByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bikeClient) CreateBikeByUser(ctx context.Context, in *CreateBikeByUserRequest, opts ...grpc.CallOption) (*CreateBikeByUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBikeByUserResponse)
	err := c.cc.Invoke(ctx, Bike_CreateBikeByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bikeClient) UpdateBikeByUser(ctx context.Context, in *UpdateBikeByUserRequest, opts ...grpc.CallOption) (*UpdateBikeByUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBikeByUserResponse)
	err := c.cc.Invoke(ctx, Bike_UpdateBikeByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bikeClient) DeleteBikeByUser(ctx context.Context, in *DeleteBikeByUserRequest, opts ...grpc.CallOption) (*DeleteBikeByUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBikeByUserResponse)
	err := c.cc.Invoke(ctx, Bike_DeleteBikeByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BikeServer is the server API for Bike service.
// All implementations must embed UnimplementedBikeServer
// for forward compatibility.
type BikeServer interface {
	GetBikeByUser(context.Context, *GetBikeByUserRequest) (*GetBikeByUserResponse, error)
	CreateBikeByUser(context.Context, *CreateBikeByUserRequest) (*CreateBikeByUserResponse, error)
	UpdateBikeByUser(context.Context, *UpdateBikeByUserRequest) (*UpdateBikeByUserResponse, error)
	DeleteBikeByUser(context.Context, *DeleteBikeByUserRequest) (*DeleteBikeByUserResponse, error)
	mustEmbedUnimplementedBikeServer()
}

// UnimplementedBikeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBikeServer struct{}

func (UnimplementedBikeServer) GetBikeByUser(context.Context, *GetBikeByUserRequest) (*GetBikeByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBikeByUser not implemented")
}
func (UnimplementedBikeServer) CreateBikeByUser(context.Context, *CreateBikeByUserRequest) (*CreateBikeByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBikeByUser not implemented")
}
func (UnimplementedBikeServer) UpdateBikeByUser(context.Context, *UpdateBikeByUserRequest) (*UpdateBikeByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBikeByUser not implemented")
}
func (UnimplementedBikeServer) DeleteBikeByUser(context.Context, *DeleteBikeByUserRequest) (*DeleteBikeByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBikeByUser not implemented")
}
func (UnimplementedBikeServer) mustEmbedUnimplementedBikeServer() {}
func (UnimplementedBikeServer) testEmbeddedByValue()              {}

// UnsafeBikeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BikeServer will
// result in compilation errors.
type UnsafeBikeServer interface {
	mustEmbedUnimplementedBikeServer()
}

func RegisterBikeServer(s grpc.ServiceRegistrar, srv BikeServer) {
	// If the following call pancis, it indicates UnimplementedBikeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Bike_ServiceDesc, srv)
}

func _Bike_GetBikeByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBikeByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BikeServer).GetBikeByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bike_GetBikeByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BikeServer).GetBikeByUser(ctx, req.(*GetBikeByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bike_CreateBikeByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBikeByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BikeServer).CreateBikeByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bike_CreateBikeByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BikeServer).CreateBikeByUser(ctx, req.(*CreateBikeByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bike_UpdateBikeByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBikeByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BikeServer).UpdateBikeByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bike_UpdateBikeByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BikeServer).UpdateBikeByUser(ctx, req.(*UpdateBikeByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bike_DeleteBikeByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBikeByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BikeServer).DeleteBikeByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bike_DeleteBikeByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BikeServer).DeleteBikeByUser(ctx, req.(*DeleteBikeByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Bike_ServiceDesc is the grpc.ServiceDesc for Bike service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bike_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gRPC.Bike",
	HandlerType: (*BikeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBikeByUser",
			Handler:    _Bike_GetBikeByUser_Handler,
		},
		{
			MethodName: "CreateBikeByUser",
			Handler:    _Bike_CreateBikeByUser_Handler,
		},
		{
			MethodName: "UpdateBikeByUser",
			Handler:    _Bike_UpdateBikeByUser_Handler,
		},
		{
			MethodName: "DeleteBikeByUser",
			Handler:    _Bike_DeleteBikeByUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "note.proto",
}
